import BigIntUnits.Divider
import chisel3.iotesters.PeekPokeTester
import org.scalatest._

import scala.math.BigInt

class DividerTester1(dut: Divider) extends PeekPokeTester(dut) {
  // Test large numbers
  var dividend = BigInt("32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655")
  var divisor = BigInt("1289371278128390128390812978361278631273861278368127381")

  poke(dut.io.valid_in, false)
  step(1)

  poke(dut.io.valid_in, true)
  poke(dut.io.divisor, divisor)
  poke(dut.io.dividend, dividend)
  step(1)

  step(5000)
  expect(dut.io.valid_out, true)
  expect(dut.io.quotient, BigInt("25064158492983753880232631485144862906090310308566373633749645396442873388864450274737752697190354196682572973418856122034178379501470218849923436446825771961559813788413667465104454346183212085997767763664540137850999720600666871849095211622713272068597008997074087750125643133303812789480289172141978892884790069251688738358667762671457507144498744875860115898057641213622228367754594711760023783530081923525881533620006931195916903612025733309705313928498610410016587753268947161888455397906124802605780123611328459638452247819550431299739712239103526846728606"))
  expect(dut.io.remainder, BigInt("153192800843121548030551686859147936569343201451669769"))

  // Test result is not lost on lowered valid_in
  poke(dut.io.valid_in, false)
  step(1)
  expect(dut.io.valid_out, true)
  expect(dut.io.quotient, BigInt("25064158492983753880232631485144862906090310308566373633749645396442873388864450274737752697190354196682572973418856122034178379501470218849923436446825771961559813788413667465104454346183212085997767763664540137850999720600666871849095211622713272068597008997074087750125643133303812789480289172141978892884790069251688738358667762671457507144498744875860115898057641213622228367754594711760023783530081923525881533620006931195916903612025733309705313928498610410016587753268947161888455397906124802605780123611328459638452247819550431299739712239103526846728606"))
  expect(dut.io.remainder, BigInt("153192800843121548030551686859147936569343201451669769"))

  // Check new computation is performed correctly
  var dividend_2 = 18726738712L
  var divisor_2 = 1829739812
  poke(dut.io.divisor, divisor_2)
  poke(dut.io.dividend, dividend_2)
  step(1)
  expect(dut.io.valid_out, true)
  expect(dut.io.quotient, BigInt("25064158492983753880232631485144862906090310308566373633749645396442873388864450274737752697190354196682572973418856122034178379501470218849923436446825771961559813788413667465104454346183212085997767763664540137850999720600666871849095211622713272068597008997074087750125643133303812789480289172141978892884790069251688738358667762671457507144498744875860115898057641213622228367754594711760023783530081923525881533620006931195916903612025733309705313928498610410016587753268947161888455397906124802605780123611328459638452247819550431299739712239103526846728606"))
  expect(dut.io.remainder, BigInt("153192800843121548030551686859147936569343201451669769"))

  poke(dut.io.valid_in, true)
  step(1)
  expect(dut.io.valid_out, false)

  step(5000)
  expect(dut.io.valid_out, true)
  expect(dut.io.quotient, 10)
  expect(dut.io.remainder, 429340592)

  // Divisor 0 test
  poke(dut.io.valid_in, false)
  step(1)
  poke(dut.io.valid_in, true)
  poke(dut.io.divisor, 0)
  step(1)
  expect(dut.io.valid_out, true)
  expect(dut.io.quotient, 0)
  expect(dut.io.remainder, 18726738712L)

  var divisor_3 = BigInt("64634012142622014601429753377339903920888205339430968064260690855049310277735781786394402823045826927377435921843796038988239118300981842190176304772896566241261754734601992183500395500779304213592115276768135136553584437285239512323676188676952340941163291704072610085775151783082131617215104798247860771043828666779336684841369949573129138989712352070652644116155611318662052385416920628300517185728354233451887207436923714715196702304603291808807395226466574462454251369421640419450314203453862646939357085161313395870091994536705997276431050332778874671087204270866459209290636957209904296387111707222119192461311")
  var dividend_3 = BigInt("1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085903001302413467189726673216491511131602920781738033436090243804708340403154190335")
  poke(dut.io.valid_in, false)
  step(1)
  poke(dut.io.valid_in, true)
  poke(dut.io.divisor, divisor_3)
  poke(dut.io.dividend, dividend_3)
  step(1)
  expect(dut.io.valid_out, false)
  step(8000)
  expect(dut.io.valid_out, true)
  expect(dut.io.quotient, BigInt("16158503035655503650357438344334975980222051334857742016065172713762327569433945446598600705761456731844358980460949009747059779575245460547544076193224141560315438683650498045875098875194826053398028819192033784138396109321309878080919047169238085235290822926018152521443787945770532904303776199561965192760957166694834171210342487393282284747428088017663161029038902829665513096354230157075129296432088558362971801859230928678799175576150822952201848806616643615613562842355410104862578550863465661734839271290328348967522998634176499319107762583194718667771801067716614802322659239302476074096777926805529798115328"))
  expect(dut.io.remainder, BigInt("16158503035655503650357438344334975980222051334857742016065172713762327569433945446598600705761456731844358980460949009747059779575245460547544076193224141560315438683650498045875098875194826053398028819192033784138396109321309878080919047169238085235290822926018152521443787945770532904303776199561965192760957166694834171210342487393282284747428088017663161029038902829665513096354230157075129296432088558362971801859230928678799175576150822952201848806616643615613562842355410104862578550863465661734839271290328348967522998634176499319107762583194718667771801067716614802322659239302476074096777926805529798115327"))

}

class DividerSpec_MaxInts extends FlatSpec with Matchers {
  "BigIntUnits.Divider" should "pass" in {
    chisel3.iotesters.Driver(() => new Divider) { c => new DividerTester1(c)} should be (true)
  }
}