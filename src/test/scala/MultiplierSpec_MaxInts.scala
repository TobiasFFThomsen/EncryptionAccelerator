import BigIntUnits.Multiplier
import chisel3.iotesters.PeekPokeTester
import org.scalatest._

import scala.math.BigInt

// Test multiplying big integers
class MultiplierTester1(dut: Multiplier) extends PeekPokeTester(dut) {

  poke(dut.io.valid_in, false)
  step(1)
  val multiplicator = BigInt("32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655")
  val multiplicand = BigInt("32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655")

  poke(dut.io.valid_in, true)
  poke(dut.io.multiplicator, multiplicator)
  poke(dut.io.multiplicand, multiplicand)
  var result: BigInt = peek(dut.io.result)
  var v_out: BigInt = peek(dut.io.valid_out)
  System.out.println("Result: " + result);
  System.out.println("run: " + run)
  System.out.println("Valid_out: " + v_out)
  System.out.println()

  for(a <- 0 to 2049){
    step(1)
    result = peek(dut.io.result)
    v_out = peek(dut.io.valid_out)
    System.out.println("Result: " + result);
    System.out.println("run: " + run)
    System.out.println("Valid_out: " + v_out)

    System.out.println()
  }

  val expected_1 = BigInt("1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023741871901102988811130405626710268718181946064858267234248908326822957364917749298135242016547239548197406578985315339420994551395098629709604094802058237524343011129545189562666282558822755212851631153784626770851139417685678156175459202759763663666471782383215750440485867225371734189763415941104668276155664514189661393763058601952208336624483511498196600415783640384772137416816357704189417932681727305016726441863036195718450354105263618554762938978070418338357066066087580800507166596670694522431472572719361668461468885653566420088626570252080688315055586012220644672393630144780823531793856693001118283961729025")
  System.out.println("Final results:")
  System.out.println("Valid output: " + v_out)
  System.out.println("Final Result: " + result)
  System.out.println("Expected: " + expected_1)
  expect(dut.io.result, expected_1)
  // System.out.println("Result equals expected?: " + (result == expected_1))
}
class MultiplierSpec_MaxInts extends FlatSpec with Matchers {
  "BigIntUnits.Multiplier" should "pass" in {
    chisel3.iotesters.Driver(() => new Multiplier) { c => new MultiplierTester1(c)} should be (true)
  }
}