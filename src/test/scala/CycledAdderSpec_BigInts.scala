import BigIntUnits.CycledAdder
import chisel3.iotesters.PeekPokeTester
import org.scalatest._

class CycledAdderTester2(dut: CycledAdder) extends PeekPokeTester(dut) {
  //var out: Seq[BigInt] = peek(dut.io.out)
  //var adder: Seq[BigInt] = peek(dut.io.adder_out)
  //var addend: Seq[BigInt] = peek(dut.io.addend_out)
  var result: BigInt = peek(dut.io.result)
  //var partial: BigInt = peek(dut.io.partial_out)
  var valid_out: BigInt = peek(dut.io.valid_out)
  var overflow: BigInt = peek(dut.io.overflow)
  //System.out.println("Out vector        : " + out)
  System.out.println("Interpreted result: " + result)
  //System.out.println("Adder vetor       : " + adder)
  //System.out.println("Addend vector     : " + addend)
  //System.out.println("Partial cycle sum : " + partial)
  System.out.println("Valid out         : " + valid_out)
  System.out.println("Carry/Overflow    : " + overflow)
  System.out.println("---------")

  poke(dut.io.adder, BigInt("261097220353288126672938177679156095644991062261845945096058370820988476992889364212206702983749389585222526678609815709496893359546448401815809021962841319486489244135927499585090397533595929578607017502963986556594079709849428186418083671086146654374201977176450926017821012185029652278616994445899507251671734744220446946486726407547565235149894863358205867325756674110764756253993099966928553885423458889971322871579559478608624183521952968159874118775047260337252104265418773417083462637758243022067387692495904092352983253803449206459297022958414187805329623211592031387556499575103086196215648918623048654255951626478311402706432958845021902155525708567549424550578292254419501668798871269980409104842571343781196003726789783864995697628349902887948567776707783522646068221069947888712445738580883629266305817265348726496923250530740848921945719737110154001853236418729955762642910594288704080345157761475729034231677085714110182611974992975445366440868305962566813264974948999022699867300443656204429612466863914812544582267618279858291387701892055461642936593324221228204880079364250610231654227718537096269602982451130745464334744412025781521475750325603366797431668304122877782900730195434508359022560951177085100788547584"))
  poke(dut.io.addend, BigInt("261097220353288126672938177679156095644991062261845945096058370820988476992889364212206702983749389585222526678609815709496893359546448401815809021962841319486489244135927499585090397533595929578607017502963986556594079709849428186418083671086146654374201977176450926017821012185029652278616994445899507251671734744220446946486726407547565235149894863358205867325756674110764756253993099966928553885423458889971322871579559478608624183521952968159874118775047260337252104265418773417083462637758243022067387692495904092352983253803449206459297022958414187805329623211592031387556499575103086196215648918623048654255951626478311402706432958845021902155525708567549424550578292254419501668798871269980409104842571343781196003726789783864995697628349902887948567776707783522646068221069947888712445738580883629266305817265348726496923250530740848921945719737110154001853236418729955762642910594288704080345157761475729034231677085714110182611974992975445366440868305962566813264974948999022699867300443656204429612466863914812544582267618279858291387701892055461642936593324221228204880079364250610231654227718537096269602982451130745464334744412025781521475750325603366797431668304122877782900730195434508359022560951177085100788547584"))
  poke(dut.io.valid_in, true)
  step(1)
  //out = peek(dut.io.out)
  result = peek(dut.io.result)
  //adder = peek(dut.io.adder_out)
  //addend = peek(dut.io.addend_out)
  //partial = peek(dut.io.partial_out)
  valid_out = peek(dut.io.valid_out)
  overflow = peek(dut.io.overflow)
  //System.out.println("Out vector        : " + out)
  System.out.println("Interpreted result: " + result)
  //System.out.println("Adder vector      : " + adder)
  //System.out.println("Addend vector     : " + addend)
  //System.out.println("Partial cycle sum : " + partial)
  System.out.println("Valid out         : " + valid_out)
  System.out.println("Carry/Overflow    : " + overflow)
  System.out.println("---------")

  step(129)
  result = peek(dut.io.result)
  //adder = peek(dut.io.adder_out)
  //addend = peek(dut.io.addend_out)
  //partial = peek(dut.io.partial_out)
  valid_out = peek(dut.io.valid_out)
  overflow = peek(dut.io.overflow)
  //System.out.println("Out vector        : " + out)
  System.out.println("Interpreted result: " + result)
  //System.out.println("Adder vector      : " + adder)
  //System.out.println("Addend vector     : " + addend)
  //System.out.println("Partial cycle sum : " + partial)
  System.out.println("Valid out         : " + valid_out)
  System.out.println("Carry/Overflow    : " + overflow)
  System.out.println("---------")
  expect(dut.io.result, BigInt("522194440706576253345876355358312191289982124523691890192116741641976953985778728424413405967498779170445053357219631418993786719092896803631618043925682638972978488271854999170180795067191859157214035005927973113188159419698856372836167342172293308748403954352901852035642024370059304557233988891799014503343469488440893892973452815095130470299789726716411734651513348221529512507986199933857107770846917779942645743159118957217248367043905936319748237550094520674504208530837546834166925275516486044134775384991808184705966507606898412918594045916828375610659246423184062775112999150206172392431297837246097308511903252956622805412865917690043804311051417135098849101156584508839003337597742539960818209685142687562392007453579567729991395256699805775897135553415567045292136442139895777424891477161767258532611634530697452993846501061481697843891439474220308003706472837459911525285821188577408160690315522951458068463354171428220365223949985950890732881736611925133626529949897998045399734600887312408859224933727829625089164535236559716582775403784110923285873186648442456409760158728501220463308455437074192539205964902261490928669488824051563042951500651206733594863336608245755565801460390869016718045121902354170201577095168"))

}
class CycledAdderSpec_BigInts extends FlatSpec with Matchers {
  "CycledAdder" should "pass" in {
    chisel3.iotesters.Driver(() => new CycledAdder(4096, 32)) { c => new CycledAdderTester2(c)} should be (true)
  }
}
