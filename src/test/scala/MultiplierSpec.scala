import BigIntUnits.Multiplier
import chisel3.iotesters.PeekPokeTester
import org.scalatest._

import scala.math.BigInt

class MultiplierTester(dut: Multiplier) extends PeekPokeTester(dut) {
  poke(dut.io.valid_in, false)
  step(1)
  // val multiplicator = BigInt("32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655")
  // val multiplicand = BigInt("32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655")
  val multiplicator = 4
  val multiplicand = 13
  poke(dut.io.valid_in, true)
  poke(dut.io.multiplicator, multiplicator)
  poke(dut.io.multiplicand, multiplicand)
  var result: BigInt = peek(dut.io.result)
  var v_out: BigInt = peek(dut.io.valid_out)
  var run: BigInt = peek(dut.io.run_out)
  System.out.println("Result: " + result);
  System.out.println("run: " + run)
  System.out.println("Valid_out: " + v_out)
  System.out.println()

  for(a <- 0 to 2049){
    step(1)
    result = peek(dut.io.result)
    v_out = peek(dut.io.valid_out)
    run = peek(dut.io.run_out)
    System.out.println("Result: " + result);
    System.out.println("run: " + run)
    System.out.println("Valid_out: " + v_out)

    System.out.println()
  }
}
class MultiplierSpec extends FlatSpec with Matchers {
  "BigIntUnits.Multiplier" should "pass" in {
    chisel3.iotesters.Driver(() => new Multiplier) { c => new MultiplierTester(c)} should be (true)
  }
}