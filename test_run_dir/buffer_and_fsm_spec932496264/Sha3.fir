;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Sha3 : 
  module Buffer : 
    input clock : Clock
    input reset : Reset
    output io : {bufferTest_0 : UInt<64>, bufferTest_1 : UInt<64>, bufferTest_2 : UInt<64>, bufferTest_3 : UInt<64>, bufferTest_4 : UInt<64>, bufferTest_5 : UInt<64>, bufferTest_6 : UInt<64>, bufferTest_7 : UInt<64>, bufferTest_8 : UInt<64>, flip d_0 : UInt<64>, flip d_1 : UInt<64>, flip d_2 : UInt<64>, flip d_3 : UInt<64>, flip d_4 : UInt<64>, flip d_5 : UInt<64>, flip d_6 : UInt<64>, flip d_7 : UInt<64>, flip d_8 : UInt<64>, flip w_in : UInt<64>, w_out : UInt<64>, bufferReady : UInt<1>, testing_buffer_counter : UInt<64>, flip hashReady : UInt<1>, flip dataRead : UInt<1>, flip roundReady : UInt<1>, flip dataValid : UInt<1>}
    
    reg bufferReg_1 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 52:28]
    reg bufferReg_2 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 53:28]
    reg bufferReg_3 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 54:28]
    reg bufferReg_4 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 55:28]
    reg bufferReg_5 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 56:28]
    reg bufferReg_6 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 57:28]
    reg bufferReg_7 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 58:28]
    reg bufferReg_8 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 59:28]
    reg bufferReg_9 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 60:28]
    reg counterReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Buffer.scala 61:28]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Buffer.scala 65:32]
    io.w_out <= UInt<1>("h00") @[Buffer.scala 66:12]
    io.testing_buffer_counter <= counterReg @[Buffer.scala 67:29]
    node _T = eq(stateReg, UInt<1>("h00")) @[Buffer.scala 68:20]
    when _T : @[Buffer.scala 69:5]
      when io.dataValid : @[Buffer.scala 70:26]
        node _T_1 = eq(io.hashReady, UInt<1>("h00")) @[Buffer.scala 71:15]
        when _T_1 : @[Buffer.scala 71:31]
          node _T_2 = lt(counterReg, UInt<4>("h09")) @[Buffer.scala 72:27]
          when _T_2 : @[Buffer.scala 72:34]
            io.bufferReady <= UInt<1>("h00") @[Buffer.scala 73:28]
            bufferReg_1 <= io.w_in @[Buffer.scala 74:25]
            bufferReg_2 <= bufferReg_1 @[Buffer.scala 75:25]
            bufferReg_3 <= bufferReg_2 @[Buffer.scala 76:25]
            bufferReg_4 <= bufferReg_3 @[Buffer.scala 77:25]
            bufferReg_5 <= bufferReg_4 @[Buffer.scala 78:25]
            bufferReg_6 <= bufferReg_5 @[Buffer.scala 79:25]
            bufferReg_7 <= bufferReg_6 @[Buffer.scala 80:25]
            bufferReg_8 <= bufferReg_7 @[Buffer.scala 81:25]
            bufferReg_9 <= bufferReg_8 @[Buffer.scala 82:25]
            node _T_3 = add(counterReg, UInt<1>("h01")) @[Buffer.scala 83:38]
            node _T_4 = tail(_T_3, 1) @[Buffer.scala 83:38]
            counterReg <= _T_4 @[Buffer.scala 83:24]
            stateReg <= UInt<1>("h00") @[Buffer.scala 84:22]
            skip @[Buffer.scala 72:34]
          else : @[Buffer.scala 85:23]
            io.bufferReady <= UInt<1>("h01") @[Buffer.scala 86:28]
            bufferReg_1 <= bufferReg_1 @[Buffer.scala 87:25]
            bufferReg_2 <= bufferReg_2 @[Buffer.scala 88:25]
            bufferReg_3 <= bufferReg_3 @[Buffer.scala 89:25]
            bufferReg_4 <= bufferReg_4 @[Buffer.scala 90:25]
            bufferReg_5 <= bufferReg_5 @[Buffer.scala 91:25]
            bufferReg_6 <= bufferReg_6 @[Buffer.scala 92:25]
            bufferReg_7 <= bufferReg_7 @[Buffer.scala 93:25]
            bufferReg_8 <= bufferReg_8 @[Buffer.scala 94:25]
            bufferReg_9 <= bufferReg_9 @[Buffer.scala 95:25]
            when io.roundReady : @[Buffer.scala 96:33]
              stateReg <= UInt<1>("h00") @[Buffer.scala 97:24]
              counterReg <= UInt<1>("h00") @[Buffer.scala 98:26]
              skip @[Buffer.scala 96:33]
            else : @[Buffer.scala 99:25]
              stateReg <= UInt<1>("h00") @[Buffer.scala 100:24]
              counterReg <= counterReg @[Buffer.scala 101:26]
              skip @[Buffer.scala 99:25]
            skip @[Buffer.scala 85:23]
          skip @[Buffer.scala 71:31]
        else : @[Buffer.scala 104:21]
          io.bufferReady <= UInt<1>("h00") @[Buffer.scala 105:26]
          bufferReg_1 <= bufferReg_1 @[Buffer.scala 106:23]
          bufferReg_2 <= bufferReg_2 @[Buffer.scala 107:23]
          bufferReg_3 <= bufferReg_3 @[Buffer.scala 108:23]
          bufferReg_4 <= bufferReg_4 @[Buffer.scala 109:23]
          bufferReg_5 <= bufferReg_5 @[Buffer.scala 110:23]
          bufferReg_6 <= bufferReg_6 @[Buffer.scala 111:23]
          bufferReg_7 <= bufferReg_7 @[Buffer.scala 112:23]
          bufferReg_8 <= bufferReg_8 @[Buffer.scala 113:23]
          bufferReg_9 <= bufferReg_9 @[Buffer.scala 114:23]
          counterReg <= UInt<1>("h00") @[Buffer.scala 115:22]
          stateReg <= UInt<1>("h01") @[Buffer.scala 116:20]
          skip @[Buffer.scala 104:21]
        skip @[Buffer.scala 70:26]
      else : @[Buffer.scala 118:18]
        io.bufferReady <= UInt<1>("h00") @[Buffer.scala 119:24]
        bufferReg_1 <= bufferReg_1 @[Buffer.scala 120:21]
        bufferReg_2 <= bufferReg_2 @[Buffer.scala 121:21]
        bufferReg_3 <= bufferReg_3 @[Buffer.scala 122:21]
        bufferReg_4 <= bufferReg_4 @[Buffer.scala 123:21]
        bufferReg_5 <= bufferReg_5 @[Buffer.scala 124:21]
        bufferReg_6 <= bufferReg_6 @[Buffer.scala 125:21]
        bufferReg_7 <= bufferReg_7 @[Buffer.scala 126:21]
        bufferReg_8 <= bufferReg_8 @[Buffer.scala 127:21]
        bufferReg_9 <= bufferReg_9 @[Buffer.scala 128:21]
        counterReg <= counterReg @[Buffer.scala 129:20]
        stateReg <= UInt<1>("h00") @[Buffer.scala 130:18]
        skip @[Buffer.scala 118:18]
      skip @[Buffer.scala 69:5]
    else : @[Buffer.scala 133:5]
      node _T_5 = eq(stateReg, UInt<1>("h01")) @[Buffer.scala 132:25]
      when _T_5 : @[Buffer.scala 133:5]
        bufferReg_1 <= io.d_0 @[Buffer.scala 134:19]
        bufferReg_2 <= io.d_1 @[Buffer.scala 135:19]
        bufferReg_3 <= io.d_2 @[Buffer.scala 136:19]
        bufferReg_4 <= io.d_3 @[Buffer.scala 137:19]
        bufferReg_5 <= io.d_4 @[Buffer.scala 138:19]
        bufferReg_6 <= io.d_5 @[Buffer.scala 139:19]
        bufferReg_7 <= io.d_6 @[Buffer.scala 140:19]
        bufferReg_8 <= io.d_7 @[Buffer.scala 141:19]
        bufferReg_9 <= io.d_8 @[Buffer.scala 142:19]
        counterReg <= UInt<1>("h00") @[Buffer.scala 143:18]
        io.bufferReady <= UInt<1>("h00") @[Buffer.scala 144:22]
        node _T_6 = and(io.hashReady, io.dataRead) @[Buffer.scala 145:25]
        when _T_6 : @[Buffer.scala 145:40]
          io.bufferReady <= UInt<1>("h00") @[Buffer.scala 146:24]
          stateReg <= UInt<1>("h00") @[Buffer.scala 147:24]
          skip @[Buffer.scala 145:40]
        else : @[Buffer.scala 148:47]
          node _T_7 = eq(io.dataRead, UInt<1>("h00")) @[Buffer.scala 148:34]
          node _T_8 = and(io.hashReady, _T_7) @[Buffer.scala 148:31]
          when _T_8 : @[Buffer.scala 148:47]
            io.bufferReady <= UInt<1>("h00") @[Buffer.scala 149:24]
            stateReg <= UInt<1>("h01") @[Buffer.scala 150:24]
            skip @[Buffer.scala 148:47]
          else : @[Buffer.scala 151:18]
            io.bufferReady <= UInt<1>("h00") @[Buffer.scala 152:24]
            stateReg <= UInt<1>("h00") @[Buffer.scala 153:24]
            skip @[Buffer.scala 151:18]
        skip @[Buffer.scala 133:5]
      else : @[Buffer.scala 155:16]
        io.bufferReady <= UInt<1>("h00") @[Buffer.scala 156:22]
        skip @[Buffer.scala 155:16]
    io.bufferTest_0 <= bufferReg_1 @[Buffer.scala 161:19]
    io.bufferTest_1 <= bufferReg_2 @[Buffer.scala 162:19]
    io.bufferTest_2 <= bufferReg_3 @[Buffer.scala 163:19]
    io.bufferTest_3 <= bufferReg_4 @[Buffer.scala 164:19]
    io.bufferTest_4 <= bufferReg_5 @[Buffer.scala 165:19]
    io.bufferTest_5 <= bufferReg_6 @[Buffer.scala 166:19]
    io.bufferTest_6 <= bufferReg_7 @[Buffer.scala 167:19]
    io.bufferTest_7 <= bufferReg_8 @[Buffer.scala 168:19]
    io.bufferTest_8 <= bufferReg_9 @[Buffer.scala 169:19]
    
  module FSM : 
    input clock : Clock
    input reset : Reset
    output io : {hash_ready : UInt<1>, flip buffer_ready : UInt<1>, flip block_length : UInt<64>, counter_for_test : UInt<64>, select_for_xor : UInt<1>, flip block_length_valid : UInt<1>}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[FSM.scala 17:37]
    reg localCountReg : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[FSM.scala 18:37]
    reg globalCountReg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[FSM.scala 19:37]
    node _T = eq(stateReg, UInt<2>("h02")) @[FSM.scala 22:17]
    when _T : @[FSM.scala 22:27]
      io.hash_ready <= UInt<1>("h01") @[FSM.scala 23:19]
      skip @[FSM.scala 22:27]
    else : @[FSM.scala 24:14]
      io.hash_ready <= UInt<1>("h00") @[FSM.scala 25:19]
      skip @[FSM.scala 24:14]
    node _T_1 = eq(stateReg, UInt<2>("h00")) @[FSM.scala 28:17]
    when _T_1 : @[FSM.scala 28:26]
      when io.buffer_ready : @[FSM.scala 29:26]
        io.select_for_xor <= UInt<1>("h01") @[FSM.scala 30:25]
        skip @[FSM.scala 29:26]
      else : @[FSM.scala 32:5]
        io.select_for_xor <= UInt<1>("h00") @[FSM.scala 33:25]
        skip @[FSM.scala 32:5]
      skip @[FSM.scala 28:26]
    else : @[FSM.scala 36:3]
      io.select_for_xor <= UInt<1>("h00") @[FSM.scala 37:25]
      skip @[FSM.scala 36:3]
    io.counter_for_test <= localCountReg @[FSM.scala 47:23]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.block_length_valid : @[FSM.scala 50:34]
        stateReg <= UInt<2>("h01") @[FSM.scala 51:18]
        localCountReg <= UInt<1>("h00") @[FSM.scala 52:23]
        when io.buffer_ready : @[FSM.scala 53:30]
          node _T_3 = lt(globalCountReg, io.block_length) @[FSM.scala 54:31]
          when _T_3 : @[FSM.scala 54:49]
            stateReg <= UInt<2>("h01") @[FSM.scala 55:22]
            node _T_4 = add(globalCountReg, UInt<1>("h01")) @[FSM.scala 56:45]
            node _T_5 = tail(_T_4, 1) @[FSM.scala 56:45]
            globalCountReg <= _T_5 @[FSM.scala 56:28]
            skip @[FSM.scala 54:49]
          else : @[FSM.scala 57:22]
            stateReg <= UInt<2>("h02") @[FSM.scala 58:22]
            globalCountReg <= UInt<1>("h00") @[FSM.scala 59:28]
            skip @[FSM.scala 57:22]
          skip @[FSM.scala 53:30]
        else : @[FSM.scala 61:20]
          globalCountReg <= globalCountReg @[FSM.scala 62:26]
          stateReg <= UInt<2>("h00") @[FSM.scala 63:20]
          skip @[FSM.scala 61:20]
        skip @[FSM.scala 50:34]
      else : @[FSM.scala 65:19]
        stateReg <= UInt<2>("h00") @[FSM.scala 66:18]
        localCountReg <= UInt<1>("h00") @[FSM.scala 67:23]
        globalCountReg <= UInt<1>("h00") @[FSM.scala 68:24]
        skip @[FSM.scala 65:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_6 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_6 : @[Conditional.scala 39:67]
        globalCountReg <= globalCountReg @[FSM.scala 72:22]
        node _T_7 = lt(localCountReg, UInt<5>("h017")) @[FSM.scala 73:25]
        when _T_7 : @[FSM.scala 73:31]
          stateReg <= UInt<2>("h01") @[FSM.scala 74:18]
          node _T_8 = add(localCountReg, UInt<1>("h01")) @[FSM.scala 75:40]
          node _T_9 = tail(_T_8, 1) @[FSM.scala 75:40]
          localCountReg <= _T_9 @[FSM.scala 75:23]
          skip @[FSM.scala 73:31]
        else : @[FSM.scala 76:18]
          localCountReg <= UInt<1>("h00") @[FSM.scala 77:23]
          stateReg <= UInt<2>("h00") @[FSM.scala 78:18]
          skip @[FSM.scala 76:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_10 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 39:67]
          globalCountReg <= UInt<1>("h00") @[FSM.scala 82:22]
          stateReg <= UInt<2>("h00") @[FSM.scala 83:16]
          localCountReg <= UInt<1>("h00") @[FSM.scala 84:21]
          skip @[Conditional.scala 39:67]
    
  module Sha3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip w_in_from_outside : UInt<64>, flip data_read : UInt<1>, w_in_to_buffer : UInt<64>, testing_round_counter : UInt<64>, testing_buffer_counter : UInt<64>, testing_buffer_ready : UInt<1>, testing_hash_ready : UInt<1>, flip block_length_in : UInt<64>, flip block_length_valid_from_env : UInt<1>, block_length_valid_to_fsm : UInt<1>, block_length_out : UInt<64>, flip data_valid_from_env : UInt<1>, data_valid_to_buffer : UInt<1>}
    
    inst buffer of Buffer @[Sha3.scala 48:31]
    buffer.clock <= clock
    buffer.reset <= reset
    inst fsm of FSM @[Sha3.scala 49:31]
    fsm.clock <= clock
    fsm.reset <= reset
    io.data_valid_to_buffer <= io.data_valid_from_env @[Sha3.scala 51:28]
    reg block_length_reg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Sha3.scala 58:34]
    io.w_in_to_buffer <= io.w_in_from_outside @[Sha3.scala 60:28]
    buffer.io.w_in <= io.w_in_to_buffer @[Sha3.scala 61:28]
    fsm.io.buffer_ready <= buffer.io.bufferReady @[Sha3.scala 62:28]
    fsm.io.block_length_valid <= io.block_length_valid_to_fsm @[Sha3.scala 63:30]
    buffer.io.roundReady <= fsm.io.select_for_xor @[Sha3.scala 65:28]
    buffer.io.dataRead <= io.data_read @[Sha3.scala 66:28]
    buffer.io.hashReady <= fsm.io.hash_ready @[Sha3.scala 67:28]
    buffer.io.dataValid <= io.data_valid_to_buffer @[Sha3.scala 68:28]
    io.testing_round_counter <= fsm.io.counter_for_test @[Sha3.scala 69:28]
    io.testing_buffer_counter <= buffer.io.testing_buffer_counter @[Sha3.scala 70:28]
    io.testing_buffer_ready <= buffer.io.bufferReady @[Sha3.scala 71:28]
    io.testing_hash_ready <= fsm.io.hash_ready @[Sha3.scala 72:28]
    fsm.io.block_length <= block_length_reg @[Sha3.scala 76:23]
    io.block_length_out <= block_length_reg @[Sha3.scala 77:23]
    when io.block_length_valid_from_env : @[Sha3.scala 78:39]
      block_length_reg <= io.block_length_in @[Sha3.scala 79:22]
      io.block_length_valid_to_fsm <= UInt<1>("h01") @[Sha3.scala 80:34]
      skip @[Sha3.scala 78:39]
    else : @[Sha3.scala 81:14]
      block_length_reg <= block_length_reg @[Sha3.scala 82:22]
      io.block_length_valid_to_fsm <= UInt<1>("h00") @[Sha3.scala 83:34]
      skip @[Sha3.scala 81:14]
    fsm.io.block_length <= block_length_reg @[Sha3.scala 87:25]
    buffer.io.d_0 <= UInt<1>("h00") @[Sha3.scala 89:17]
    buffer.io.d_1 <= UInt<1>("h00") @[Sha3.scala 90:17]
    buffer.io.d_2 <= UInt<1>("h00") @[Sha3.scala 91:17]
    buffer.io.d_3 <= UInt<1>("h00") @[Sha3.scala 92:17]
    buffer.io.d_4 <= UInt<1>("h00") @[Sha3.scala 93:17]
    buffer.io.d_5 <= UInt<1>("h00") @[Sha3.scala 94:17]
    buffer.io.d_6 <= UInt<1>("h00") @[Sha3.scala 95:17]
    buffer.io.d_7 <= UInt<1>("h00") @[Sha3.scala 96:17]
    buffer.io.d_8 <= UInt<1>("h00") @[Sha3.scala 97:17]
    
