;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit FSM : 
  module FSM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip start_calculation : UInt<1>, hash_ready : UInt<1>, flip buffer_ready : UInt<1>, counter_for_test : UInt<64>, select_for_xor : UInt<1>}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[FSM.scala 37:32]
    reg countReg : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[FSM.scala 38:32]
    node _T = eq(stateReg, UInt<2>("h02")) @[FSM.scala 53:17]
    when _T : @[FSM.scala 53:27]
      io.hash_ready <= UInt<1>("h01") @[FSM.scala 54:19]
      skip @[FSM.scala 53:27]
    else : @[FSM.scala 55:14]
      io.hash_ready <= UInt<1>("h00") @[FSM.scala 56:19]
      skip @[FSM.scala 55:14]
    io.counter_for_test <= countReg @[FSM.scala 59:23]
    node _T_1 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_1 : @[Conditional.scala 40:58]
      countReg <= UInt<1>("h00") @[FSM.scala 62:16]
      node _T_2 = and(io.start_calculation, io.buffer_ready) @[FSM.scala 63:33]
      when _T_2 : @[FSM.scala 63:52]
        io.select_for_xor <= UInt<1>("h01") @[FSM.scala 64:27]
        stateReg <= UInt<2>("h01") @[FSM.scala 65:18]
        skip @[FSM.scala 63:52]
      else : @[FSM.scala 66:18]
        stateReg <= UInt<2>("h00") @[FSM.scala 67:18]
        io.select_for_xor <= UInt<1>("h00") @[FSM.scala 68:27]
        skip @[FSM.scala 66:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        io.select_for_xor <= UInt<1>("h00") @[FSM.scala 72:25]
        node _T_4 = lt(countReg, UInt<5>("h018")) @[FSM.scala 73:20]
        when _T_4 : @[FSM.scala 73:26]
          stateReg <= UInt<2>("h01") @[FSM.scala 74:18]
          node _T_5 = add(countReg, UInt<1>("h01")) @[FSM.scala 75:30]
          node _T_6 = tail(_T_5, 1) @[FSM.scala 75:30]
          countReg <= _T_6 @[FSM.scala 75:18]
          skip @[FSM.scala 73:26]
        else : @[FSM.scala 76:18]
          countReg <= UInt<1>("h00") @[FSM.scala 77:18]
          stateReg <= UInt<2>("h02") @[FSM.scala 78:18]
          skip @[FSM.scala 76:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          io.select_for_xor <= UInt<1>("h00") @[FSM.scala 82:25]
          stateReg <= UInt<2>("h00") @[FSM.scala 83:16]
          countReg <= UInt<1>("h00") @[FSM.scala 84:16]
          skip @[Conditional.scala 39:67]
    
