;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit FSM : 
  module FSM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip start_calculation : UInt<1>, hash_ready : UInt<1>, flip buffer_ready : UInt<1>, counter_for_test : UInt<64>, select_for_xor : UInt<1>, select_for_result : UInt<1>}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[FSM.scala 17:32]
    reg countReg : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[FSM.scala 18:32]
    node _T = eq(stateReg, UInt<2>("h02")) @[FSM.scala 20:17]
    when _T : @[FSM.scala 20:27]
      io.hash_ready <= UInt<1>("h01") @[FSM.scala 21:19]
      skip @[FSM.scala 20:27]
    else : @[FSM.scala 22:14]
      io.hash_ready <= UInt<1>("h00") @[FSM.scala 23:19]
      skip @[FSM.scala 22:14]
    node _T_1 = eq(stateReg, UInt<2>("h00")) @[FSM.scala 26:17]
    when _T_1 : @[FSM.scala 26:26]
      node _T_2 = and(io.start_calculation, io.buffer_ready) @[FSM.scala 27:31]
      when _T_2 : @[FSM.scala 27:50]
        io.select_for_xor <= UInt<1>("h01") @[FSM.scala 28:25]
        skip @[FSM.scala 27:50]
      else : @[FSM.scala 30:5]
        io.select_for_xor <= UInt<1>("h00") @[FSM.scala 31:25]
        skip @[FSM.scala 30:5]
      skip @[FSM.scala 26:26]
    else : @[FSM.scala 34:3]
      io.select_for_xor <= UInt<1>("h00") @[FSM.scala 35:25]
      skip @[FSM.scala 34:3]
    node _T_3 = eq(stateReg, UInt<2>("h02")) @[FSM.scala 38:17]
    when _T_3 : @[FSM.scala 38:26]
      io.select_for_result <= UInt<1>("h01") @[FSM.scala 39:26]
      skip @[FSM.scala 38:26]
    else : @[FSM.scala 40:14]
      io.select_for_result <= UInt<1>("h00") @[FSM.scala 41:26]
      skip @[FSM.scala 40:14]
    io.counter_for_test <= countReg @[FSM.scala 44:23]
    node _T_4 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_4 : @[Conditional.scala 40:58]
      stateReg <= UInt<2>("h01") @[FSM.scala 47:16]
      countReg <= UInt<1>("h00") @[FSM.scala 48:16]
      node _T_5 = and(io.start_calculation, io.buffer_ready) @[FSM.scala 49:33]
      when _T_5 : @[FSM.scala 49:52]
        stateReg <= UInt<2>("h01") @[FSM.scala 50:18]
        skip @[FSM.scala 49:52]
      else : @[FSM.scala 51:18]
        stateReg <= UInt<2>("h00") @[FSM.scala 52:18]
        skip @[FSM.scala 51:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_6 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_6 : @[Conditional.scala 39:67]
        node _T_7 = lt(countReg, UInt<5>("h017")) @[FSM.scala 56:20]
        when _T_7 : @[FSM.scala 56:26]
          stateReg <= UInt<2>("h01") @[FSM.scala 57:18]
          node _T_8 = add(countReg, UInt<1>("h01")) @[FSM.scala 58:30]
          node _T_9 = tail(_T_8, 1) @[FSM.scala 58:30]
          countReg <= _T_9 @[FSM.scala 58:18]
          skip @[FSM.scala 56:26]
        else : @[FSM.scala 59:18]
          countReg <= UInt<1>("h00") @[FSM.scala 60:18]
          stateReg <= UInt<2>("h02") @[FSM.scala 61:18]
          skip @[FSM.scala 59:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_10 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 39:67]
          stateReg <= UInt<2>("h00") @[FSM.scala 65:16]
          countReg <= UInt<1>("h00") @[FSM.scala 66:16]
          skip @[Conditional.scala 39:67]
    
