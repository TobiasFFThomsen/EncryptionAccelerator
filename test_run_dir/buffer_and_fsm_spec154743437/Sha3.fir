;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Sha3 : 
  module Buffer : 
    input clock : Clock
    input reset : Reset
    output io : {bufferTest_0 : UInt<64>, bufferTest_1 : UInt<64>, bufferTest_2 : UInt<64>, bufferTest_3 : UInt<64>, bufferTest_4 : UInt<64>, bufferTest_5 : UInt<64>, bufferTest_6 : UInt<64>, bufferTest_7 : UInt<64>, bufferTest_8 : UInt<64>, flip d_0 : UInt<64>, flip d_1 : UInt<64>, flip d_2 : UInt<64>, flip d_3 : UInt<64>, flip d_4 : UInt<64>, flip d_5 : UInt<64>, flip d_6 : UInt<64>, flip d_7 : UInt<64>, flip d_8 : UInt<64>, flip w_in : UInt<64>, w_out : UInt<64>, bufferReady : UInt<1>, flip hashReady : UInt<1>, flip dataRead : UInt<1>, flip roundReady : UInt<1>}
    
    reg bufferReg_1 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 49:28]
    reg bufferReg_2 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 50:28]
    reg bufferReg_3 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 51:28]
    reg bufferReg_4 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 52:28]
    reg bufferReg_5 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 53:28]
    reg bufferReg_6 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 54:28]
    reg bufferReg_7 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 55:28]
    reg bufferReg_8 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 56:28]
    reg bufferReg_9 : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Buffer.scala 57:28]
    reg counterReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Buffer.scala 58:28]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Buffer.scala 62:32]
    io.w_out <= UInt<1>("h00") @[Buffer.scala 63:12]
    node _T = eq(stateReg, UInt<1>("h00")) @[Buffer.scala 65:20]
    when _T : @[Buffer.scala 66:5]
      node _T_1 = eq(io.hashReady, UInt<1>("h00")) @[Buffer.scala 67:15]
      when _T_1 : @[Buffer.scala 68:9]
        node _T_2 = lt(counterReg, UInt<4>("h09")) @[Buffer.scala 69:28]
        when _T_2 : @[Buffer.scala 70:13]
          io.bufferReady <= UInt<1>("h00") @[Buffer.scala 71:30]
          bufferReg_1 <= io.w_in @[Buffer.scala 72:27]
          bufferReg_2 <= bufferReg_1 @[Buffer.scala 73:27]
          bufferReg_3 <= bufferReg_2 @[Buffer.scala 74:27]
          bufferReg_4 <= bufferReg_3 @[Buffer.scala 75:27]
          bufferReg_5 <= bufferReg_4 @[Buffer.scala 76:27]
          bufferReg_6 <= bufferReg_5 @[Buffer.scala 77:27]
          bufferReg_7 <= bufferReg_6 @[Buffer.scala 78:27]
          bufferReg_8 <= bufferReg_7 @[Buffer.scala 79:27]
          bufferReg_9 <= bufferReg_8 @[Buffer.scala 80:27]
          node _T_3 = add(counterReg, UInt<1>("h01")) @[Buffer.scala 81:40]
          node _T_4 = tail(_T_3, 1) @[Buffer.scala 81:40]
          counterReg <= _T_4 @[Buffer.scala 81:26]
          stateReg <= UInt<1>("h00") @[Buffer.scala 82:24]
          skip @[Buffer.scala 70:13]
        else : @[Buffer.scala 84:13]
          io.bufferReady <= UInt<1>("h01") @[Buffer.scala 85:30]
          bufferReg_1 <= bufferReg_1 @[Buffer.scala 86:27]
          bufferReg_2 <= bufferReg_2 @[Buffer.scala 87:27]
          bufferReg_3 <= bufferReg_3 @[Buffer.scala 88:27]
          bufferReg_4 <= bufferReg_4 @[Buffer.scala 89:27]
          bufferReg_5 <= bufferReg_5 @[Buffer.scala 90:27]
          bufferReg_6 <= bufferReg_6 @[Buffer.scala 91:27]
          bufferReg_7 <= bufferReg_7 @[Buffer.scala 92:27]
          bufferReg_8 <= bufferReg_8 @[Buffer.scala 93:27]
          bufferReg_9 <= bufferReg_9 @[Buffer.scala 94:27]
          when io.roundReady : @[Buffer.scala 95:34]
            stateReg <= UInt<1>("h00") @[Buffer.scala 96:26]
            counterReg <= UInt<1>("h00") @[Buffer.scala 97:28]
            skip @[Buffer.scala 95:34]
          else : @[Buffer.scala 98:26]
            stateReg <= UInt<1>("h00") @[Buffer.scala 99:26]
            counterReg <= counterReg @[Buffer.scala 100:28]
            skip @[Buffer.scala 98:26]
          skip @[Buffer.scala 84:13]
        skip @[Buffer.scala 68:9]
      else : @[Buffer.scala 104:9]
        io.bufferReady <= UInt<1>("h00") @[Buffer.scala 105:26]
        bufferReg_1 <= bufferReg_1 @[Buffer.scala 106:23]
        bufferReg_2 <= bufferReg_2 @[Buffer.scala 107:23]
        bufferReg_3 <= bufferReg_3 @[Buffer.scala 108:23]
        bufferReg_4 <= bufferReg_4 @[Buffer.scala 109:23]
        bufferReg_5 <= bufferReg_5 @[Buffer.scala 110:23]
        bufferReg_6 <= bufferReg_6 @[Buffer.scala 111:23]
        bufferReg_7 <= bufferReg_7 @[Buffer.scala 112:23]
        bufferReg_8 <= bufferReg_8 @[Buffer.scala 113:23]
        bufferReg_9 <= bufferReg_9 @[Buffer.scala 114:23]
        counterReg <= UInt<1>("h00") @[Buffer.scala 115:22]
        stateReg <= UInt<1>("h01") @[Buffer.scala 116:20]
        skip @[Buffer.scala 104:9]
      skip @[Buffer.scala 66:5]
    else : @[Buffer.scala 119:5]
      node _T_5 = eq(stateReg, UInt<1>("h01")) @[Buffer.scala 118:25]
      when _T_5 : @[Buffer.scala 119:5]
        bufferReg_1 <= io.d_0 @[Buffer.scala 120:19]
        bufferReg_2 <= io.d_1 @[Buffer.scala 121:19]
        bufferReg_3 <= io.d_2 @[Buffer.scala 122:19]
        bufferReg_4 <= io.d_3 @[Buffer.scala 123:19]
        bufferReg_5 <= io.d_4 @[Buffer.scala 124:19]
        bufferReg_6 <= io.d_5 @[Buffer.scala 125:19]
        bufferReg_7 <= io.d_6 @[Buffer.scala 126:19]
        bufferReg_8 <= io.d_7 @[Buffer.scala 127:19]
        bufferReg_9 <= io.d_8 @[Buffer.scala 128:19]
        counterReg <= UInt<1>("h00") @[Buffer.scala 129:18]
        io.bufferReady <= UInt<1>("h00") @[Buffer.scala 130:22]
        node _T_6 = and(io.hashReady, io.dataRead) @[Buffer.scala 131:25]
        when _T_6 : @[Buffer.scala 131:40]
          io.bufferReady <= UInt<1>("h00") @[Buffer.scala 132:24]
          stateReg <= UInt<1>("h00") @[Buffer.scala 133:24]
          skip @[Buffer.scala 131:40]
        else : @[Buffer.scala 134:47]
          node _T_7 = eq(io.dataRead, UInt<1>("h00")) @[Buffer.scala 134:34]
          node _T_8 = and(io.hashReady, _T_7) @[Buffer.scala 134:31]
          when _T_8 : @[Buffer.scala 134:47]
            io.bufferReady <= UInt<1>("h00") @[Buffer.scala 135:24]
            stateReg <= UInt<1>("h01") @[Buffer.scala 136:24]
            skip @[Buffer.scala 134:47]
          else : @[Buffer.scala 137:18]
            io.bufferReady <= UInt<1>("h00") @[Buffer.scala 138:24]
            stateReg <= UInt<1>("h00") @[Buffer.scala 139:24]
            skip @[Buffer.scala 137:18]
        skip @[Buffer.scala 119:5]
      else : @[Buffer.scala 141:16]
        io.bufferReady <= UInt<1>("h00") @[Buffer.scala 142:22]
        skip @[Buffer.scala 141:16]
    io.bufferTest_0 <= bufferReg_1 @[Buffer.scala 147:19]
    io.bufferTest_1 <= bufferReg_2 @[Buffer.scala 148:19]
    io.bufferTest_2 <= bufferReg_3 @[Buffer.scala 149:19]
    io.bufferTest_3 <= bufferReg_4 @[Buffer.scala 150:19]
    io.bufferTest_4 <= bufferReg_5 @[Buffer.scala 151:19]
    io.bufferTest_5 <= bufferReg_6 @[Buffer.scala 152:19]
    io.bufferTest_6 <= bufferReg_7 @[Buffer.scala 153:19]
    io.bufferTest_7 <= bufferReg_8 @[Buffer.scala 154:19]
    io.bufferTest_8 <= bufferReg_9 @[Buffer.scala 155:19]
    
  module FSM : 
    input clock : Clock
    input reset : Reset
    output io : {hash_ready : UInt<1>, flip buffer_ready : UInt<1>, counter_for_test : UInt<64>, select_for_xor : UInt<1>}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[FSM.scala 15:32]
    reg countReg : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[FSM.scala 16:32]
    node _T = eq(stateReg, UInt<2>("h02")) @[FSM.scala 18:17]
    when _T : @[FSM.scala 18:27]
      io.hash_ready <= UInt<1>("h01") @[FSM.scala 19:19]
      skip @[FSM.scala 18:27]
    else : @[FSM.scala 20:14]
      io.hash_ready <= UInt<1>("h00") @[FSM.scala 21:19]
      skip @[FSM.scala 20:14]
    node _T_1 = eq(stateReg, UInt<2>("h00")) @[FSM.scala 24:17]
    when _T_1 : @[FSM.scala 24:26]
      when io.buffer_ready : @[FSM.scala 25:26]
        io.select_for_xor <= UInt<1>("h01") @[FSM.scala 26:25]
        skip @[FSM.scala 25:26]
      else : @[FSM.scala 28:5]
        io.select_for_xor <= UInt<1>("h00") @[FSM.scala 29:25]
        skip @[FSM.scala 28:5]
      skip @[FSM.scala 24:26]
    else : @[FSM.scala 32:3]
      io.select_for_xor <= UInt<1>("h00") @[FSM.scala 33:25]
      skip @[FSM.scala 32:3]
    io.counter_for_test <= countReg @[FSM.scala 43:23]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      stateReg <= UInt<2>("h01") @[FSM.scala 46:16]
      countReg <= UInt<1>("h00") @[FSM.scala 47:16]
      when io.buffer_ready : @[FSM.scala 48:28]
        stateReg <= UInt<2>("h01") @[FSM.scala 49:18]
        skip @[FSM.scala 48:28]
      else : @[FSM.scala 50:18]
        stateReg <= UInt<2>("h00") @[FSM.scala 51:18]
        skip @[FSM.scala 50:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = lt(countReg, UInt<5>("h017")) @[FSM.scala 55:20]
        when _T_4 : @[FSM.scala 55:26]
          stateReg <= UInt<2>("h01") @[FSM.scala 56:18]
          node _T_5 = add(countReg, UInt<1>("h01")) @[FSM.scala 57:30]
          node _T_6 = tail(_T_5, 1) @[FSM.scala 57:30]
          countReg <= _T_6 @[FSM.scala 57:18]
          skip @[FSM.scala 55:26]
        else : @[FSM.scala 58:18]
          countReg <= UInt<1>("h00") @[FSM.scala 59:18]
          stateReg <= UInt<2>("h02") @[FSM.scala 60:18]
          skip @[FSM.scala 58:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          stateReg <= UInt<2>("h00") @[FSM.scala 64:16]
          countReg <= UInt<1>("h00") @[FSM.scala 65:16]
          skip @[Conditional.scala 39:67]
    
  module Sha3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {testing_round_counter : UInt<64>}
    
    inst buffer of Buffer @[Sha3.scala 35:31]
    buffer.clock <= clock
    buffer.reset <= reset
    inst fsm of FSM @[Sha3.scala 36:31]
    fsm.clock <= clock
    fsm.reset <= reset
    io.testing_round_counter <= fsm.io.counter_for_test @[Sha3.scala 38:28]
    
