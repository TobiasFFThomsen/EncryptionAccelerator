;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Round : 
  module Round : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip round_in : SInt<64>[5][5], round_out : SInt<64>[5][5], theta_c : SInt<64>[5], theta_d : SInt<64>[5], rotation1Out : SInt<64>[5], rotation2Out : SInt<64>[5], rotationResultsOut : SInt<64>[5], testingOut : SInt<64>[5]}
    
    io.round_out[0][0] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[0][1] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[0][2] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[0][3] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[0][4] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[1][0] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[1][1] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[1][2] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[1][3] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[1][4] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[2][0] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[2][1] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[2][2] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[2][3] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[2][4] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[3][0] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[3][1] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[3][2] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[3][3] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[3][4] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[4][0] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[4][1] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[4][2] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[4][3] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    io.round_out[4][4] <= asSInt(UInt<1>("h00")) @[Round.scala 24:30]
    wire c : SInt<64>[5] @[Round.scala 32:15]
    wire d : SInt<64>[5] @[Round.scala 33:15]
    node _T = xor(io.round_in[0][0], io.round_in[0][1]) @[Round.scala 36:30]
    node _T_1 = asSInt(_T) @[Round.scala 36:30]
    node _T_2 = xor(_T_1, io.round_in[0][2]) @[Round.scala 36:48]
    node _T_3 = asSInt(_T_2) @[Round.scala 36:48]
    node _T_4 = xor(_T_3, io.round_in[0][3]) @[Round.scala 36:66]
    node _T_5 = asSInt(_T_4) @[Round.scala 36:66]
    node _T_6 = xor(_T_5, io.round_in[0][4]) @[Round.scala 36:84]
    node _T_7 = asSInt(_T_6) @[Round.scala 36:84]
    c[0] <= _T_7 @[Round.scala 36:10]
    node _T_8 = xor(io.round_in[1][0], io.round_in[1][1]) @[Round.scala 36:30]
    node _T_9 = asSInt(_T_8) @[Round.scala 36:30]
    node _T_10 = xor(_T_9, io.round_in[1][2]) @[Round.scala 36:48]
    node _T_11 = asSInt(_T_10) @[Round.scala 36:48]
    node _T_12 = xor(_T_11, io.round_in[1][3]) @[Round.scala 36:66]
    node _T_13 = asSInt(_T_12) @[Round.scala 36:66]
    node _T_14 = xor(_T_13, io.round_in[1][4]) @[Round.scala 36:84]
    node _T_15 = asSInt(_T_14) @[Round.scala 36:84]
    c[1] <= _T_15 @[Round.scala 36:10]
    node _T_16 = xor(io.round_in[2][0], io.round_in[2][1]) @[Round.scala 36:30]
    node _T_17 = asSInt(_T_16) @[Round.scala 36:30]
    node _T_18 = xor(_T_17, io.round_in[2][2]) @[Round.scala 36:48]
    node _T_19 = asSInt(_T_18) @[Round.scala 36:48]
    node _T_20 = xor(_T_19, io.round_in[2][3]) @[Round.scala 36:66]
    node _T_21 = asSInt(_T_20) @[Round.scala 36:66]
    node _T_22 = xor(_T_21, io.round_in[2][4]) @[Round.scala 36:84]
    node _T_23 = asSInt(_T_22) @[Round.scala 36:84]
    c[2] <= _T_23 @[Round.scala 36:10]
    node _T_24 = xor(io.round_in[3][0], io.round_in[3][1]) @[Round.scala 36:30]
    node _T_25 = asSInt(_T_24) @[Round.scala 36:30]
    node _T_26 = xor(_T_25, io.round_in[3][2]) @[Round.scala 36:48]
    node _T_27 = asSInt(_T_26) @[Round.scala 36:48]
    node _T_28 = xor(_T_27, io.round_in[3][3]) @[Round.scala 36:66]
    node _T_29 = asSInt(_T_28) @[Round.scala 36:66]
    node _T_30 = xor(_T_29, io.round_in[3][4]) @[Round.scala 36:84]
    node _T_31 = asSInt(_T_30) @[Round.scala 36:84]
    c[3] <= _T_31 @[Round.scala 36:10]
    node _T_32 = xor(io.round_in[4][0], io.round_in[4][1]) @[Round.scala 36:30]
    node _T_33 = asSInt(_T_32) @[Round.scala 36:30]
    node _T_34 = xor(_T_33, io.round_in[4][2]) @[Round.scala 36:48]
    node _T_35 = asSInt(_T_34) @[Round.scala 36:48]
    node _T_36 = xor(_T_35, io.round_in[4][3]) @[Round.scala 36:66]
    node _T_37 = asSInt(_T_36) @[Round.scala 36:66]
    node _T_38 = xor(_T_37, io.round_in[4][4]) @[Round.scala 36:84]
    node _T_39 = asSInt(_T_38) @[Round.scala 36:84]
    c[4] <= _T_39 @[Round.scala 36:10]
    wire rotation1 : SInt<64>[5] @[Round.scala 40:23]
    wire rotation2 : SInt<64>[5] @[Round.scala 41:23]
    wire rotation_result : SInt<64>[5] @[Round.scala 42:29]
    rotation1[0] <= asSInt(UInt<1>("h00")) @[Round.scala 47:18]
    rotation2[0] <= asSInt(UInt<1>("h00")) @[Round.scala 48:18]
    rotation1[1] <= asSInt(UInt<1>("h00")) @[Round.scala 47:18]
    rotation2[1] <= asSInt(UInt<1>("h00")) @[Round.scala 48:18]
    rotation1[2] <= asSInt(UInt<1>("h00")) @[Round.scala 47:18]
    rotation2[2] <= asSInt(UInt<1>("h00")) @[Round.scala 48:18]
    rotation1[3] <= asSInt(UInt<1>("h00")) @[Round.scala 47:18]
    rotation2[3] <= asSInt(UInt<1>("h00")) @[Round.scala 48:18]
    rotation1[4] <= asSInt(UInt<1>("h00")) @[Round.scala 47:18]
    rotation2[4] <= asSInt(UInt<1>("h00")) @[Round.scala 48:18]
    io.testingOut[0] <= c[1] @[Round.scala 58:22]
    node _T_40 = shl(c[1], 1) @[Round.scala 59:37]
    rotation1[0] <= _T_40 @[Round.scala 59:18]
    io.rotation1Out[0] <= rotation1[0] @[Round.scala 60:24]
    node _T_41 = shr(c[1], 63) @[Round.scala 61:37]
    rotation2[0] <= _T_41 @[Round.scala 61:18]
    io.rotation2Out[0] <= rotation2[0] @[Round.scala 62:24]
    node _T_42 = or(rotation1[0], rotation2[0]) @[Round.scala 63:40]
    node _T_43 = asSInt(_T_42) @[Round.scala 63:40]
    rotation_result[0] <= _T_43 @[Round.scala 63:24]
    io.rotationResultsOut[0] <= rotation_result[0] @[Round.scala 64:30]
    node _T_44 = xor(c[4], rotation_result[0]) @[Round.scala 66:29]
    node _T_45 = asSInt(_T_44) @[Round.scala 66:29]
    d[0] <= _T_45 @[Round.scala 66:10]
    io.testingOut[1] <= c[2] @[Round.scala 58:22]
    node _T_46 = shl(c[2], 1) @[Round.scala 59:37]
    rotation1[1] <= _T_46 @[Round.scala 59:18]
    io.rotation1Out[1] <= rotation1[1] @[Round.scala 60:24]
    node _T_47 = shr(c[2], 63) @[Round.scala 61:37]
    rotation2[1] <= _T_47 @[Round.scala 61:18]
    io.rotation2Out[1] <= rotation2[1] @[Round.scala 62:24]
    node _T_48 = or(rotation1[1], rotation2[1]) @[Round.scala 63:40]
    node _T_49 = asSInt(_T_48) @[Round.scala 63:40]
    rotation_result[1] <= _T_49 @[Round.scala 63:24]
    io.rotationResultsOut[1] <= rotation_result[1] @[Round.scala 64:30]
    node _T_50 = xor(c[0], rotation_result[1]) @[Round.scala 66:29]
    node _T_51 = asSInt(_T_50) @[Round.scala 66:29]
    d[1] <= _T_51 @[Round.scala 66:10]
    io.testingOut[2] <= c[3] @[Round.scala 58:22]
    node _T_52 = shl(c[3], 1) @[Round.scala 59:37]
    rotation1[2] <= _T_52 @[Round.scala 59:18]
    io.rotation1Out[2] <= rotation1[2] @[Round.scala 60:24]
    node _T_53 = shr(c[3], 63) @[Round.scala 61:37]
    rotation2[2] <= _T_53 @[Round.scala 61:18]
    io.rotation2Out[2] <= rotation2[2] @[Round.scala 62:24]
    node _T_54 = or(rotation1[2], rotation2[2]) @[Round.scala 63:40]
    node _T_55 = asSInt(_T_54) @[Round.scala 63:40]
    rotation_result[2] <= _T_55 @[Round.scala 63:24]
    io.rotationResultsOut[2] <= rotation_result[2] @[Round.scala 64:30]
    node _T_56 = xor(c[1], rotation_result[2]) @[Round.scala 66:29]
    node _T_57 = asSInt(_T_56) @[Round.scala 66:29]
    d[2] <= _T_57 @[Round.scala 66:10]
    io.testingOut[3] <= c[4] @[Round.scala 58:22]
    node _T_58 = shl(c[4], 1) @[Round.scala 59:37]
    rotation1[3] <= _T_58 @[Round.scala 59:18]
    io.rotation1Out[3] <= rotation1[3] @[Round.scala 60:24]
    node _T_59 = shr(c[4], 63) @[Round.scala 61:37]
    rotation2[3] <= _T_59 @[Round.scala 61:18]
    io.rotation2Out[3] <= rotation2[3] @[Round.scala 62:24]
    node _T_60 = or(rotation1[3], rotation2[3]) @[Round.scala 63:40]
    node _T_61 = asSInt(_T_60) @[Round.scala 63:40]
    rotation_result[3] <= _T_61 @[Round.scala 63:24]
    io.rotationResultsOut[3] <= rotation_result[3] @[Round.scala 64:30]
    node _T_62 = xor(c[2], rotation_result[3]) @[Round.scala 66:29]
    node _T_63 = asSInt(_T_62) @[Round.scala 66:29]
    d[3] <= _T_63 @[Round.scala 66:10]
    io.testingOut[4] <= c[0] @[Round.scala 58:22]
    node _T_64 = shl(c[0], 1) @[Round.scala 59:37]
    rotation1[4] <= _T_64 @[Round.scala 59:18]
    io.rotation1Out[4] <= rotation1[4] @[Round.scala 60:24]
    node _T_65 = shr(c[0], 63) @[Round.scala 61:37]
    rotation2[4] <= _T_65 @[Round.scala 61:18]
    io.rotation2Out[4] <= rotation2[4] @[Round.scala 62:24]
    node _T_66 = or(rotation1[4], rotation2[4]) @[Round.scala 63:40]
    node _T_67 = asSInt(_T_66) @[Round.scala 63:40]
    rotation_result[4] <= _T_67 @[Round.scala 63:24]
    io.rotationResultsOut[4] <= rotation_result[4] @[Round.scala 64:30]
    node _T_68 = xor(c[3], rotation_result[4]) @[Round.scala 66:29]
    node _T_69 = asSInt(_T_68) @[Round.scala 66:29]
    d[4] <= _T_69 @[Round.scala 66:10]
    node _T_70 = xor(io.round_in[0][0], d[0]) @[Round.scala 71:48]
    node _T_71 = asSInt(_T_70) @[Round.scala 71:48]
    io.round_out[0][0] <= _T_71 @[Round.scala 71:28]
    node _T_72 = xor(io.round_in[0][1], d[0]) @[Round.scala 71:48]
    node _T_73 = asSInt(_T_72) @[Round.scala 71:48]
    io.round_out[0][1] <= _T_73 @[Round.scala 71:28]
    node _T_74 = xor(io.round_in[0][2], d[0]) @[Round.scala 71:48]
    node _T_75 = asSInt(_T_74) @[Round.scala 71:48]
    io.round_out[0][2] <= _T_75 @[Round.scala 71:28]
    node _T_76 = xor(io.round_in[0][3], d[0]) @[Round.scala 71:48]
    node _T_77 = asSInt(_T_76) @[Round.scala 71:48]
    io.round_out[0][3] <= _T_77 @[Round.scala 71:28]
    node _T_78 = xor(io.round_in[0][4], d[0]) @[Round.scala 71:48]
    node _T_79 = asSInt(_T_78) @[Round.scala 71:48]
    io.round_out[0][4] <= _T_79 @[Round.scala 71:28]
    node _T_80 = xor(io.round_in[1][0], d[1]) @[Round.scala 71:48]
    node _T_81 = asSInt(_T_80) @[Round.scala 71:48]
    io.round_out[1][0] <= _T_81 @[Round.scala 71:28]
    node _T_82 = xor(io.round_in[1][1], d[1]) @[Round.scala 71:48]
    node _T_83 = asSInt(_T_82) @[Round.scala 71:48]
    io.round_out[1][1] <= _T_83 @[Round.scala 71:28]
    node _T_84 = xor(io.round_in[1][2], d[1]) @[Round.scala 71:48]
    node _T_85 = asSInt(_T_84) @[Round.scala 71:48]
    io.round_out[1][2] <= _T_85 @[Round.scala 71:28]
    node _T_86 = xor(io.round_in[1][3], d[1]) @[Round.scala 71:48]
    node _T_87 = asSInt(_T_86) @[Round.scala 71:48]
    io.round_out[1][3] <= _T_87 @[Round.scala 71:28]
    node _T_88 = xor(io.round_in[1][4], d[1]) @[Round.scala 71:48]
    node _T_89 = asSInt(_T_88) @[Round.scala 71:48]
    io.round_out[1][4] <= _T_89 @[Round.scala 71:28]
    node _T_90 = xor(io.round_in[2][0], d[2]) @[Round.scala 71:48]
    node _T_91 = asSInt(_T_90) @[Round.scala 71:48]
    io.round_out[2][0] <= _T_91 @[Round.scala 71:28]
    node _T_92 = xor(io.round_in[2][1], d[2]) @[Round.scala 71:48]
    node _T_93 = asSInt(_T_92) @[Round.scala 71:48]
    io.round_out[2][1] <= _T_93 @[Round.scala 71:28]
    node _T_94 = xor(io.round_in[2][2], d[2]) @[Round.scala 71:48]
    node _T_95 = asSInt(_T_94) @[Round.scala 71:48]
    io.round_out[2][2] <= _T_95 @[Round.scala 71:28]
    node _T_96 = xor(io.round_in[2][3], d[2]) @[Round.scala 71:48]
    node _T_97 = asSInt(_T_96) @[Round.scala 71:48]
    io.round_out[2][3] <= _T_97 @[Round.scala 71:28]
    node _T_98 = xor(io.round_in[2][4], d[2]) @[Round.scala 71:48]
    node _T_99 = asSInt(_T_98) @[Round.scala 71:48]
    io.round_out[2][4] <= _T_99 @[Round.scala 71:28]
    node _T_100 = xor(io.round_in[3][0], d[3]) @[Round.scala 71:48]
    node _T_101 = asSInt(_T_100) @[Round.scala 71:48]
    io.round_out[3][0] <= _T_101 @[Round.scala 71:28]
    node _T_102 = xor(io.round_in[3][1], d[3]) @[Round.scala 71:48]
    node _T_103 = asSInt(_T_102) @[Round.scala 71:48]
    io.round_out[3][1] <= _T_103 @[Round.scala 71:28]
    node _T_104 = xor(io.round_in[3][2], d[3]) @[Round.scala 71:48]
    node _T_105 = asSInt(_T_104) @[Round.scala 71:48]
    io.round_out[3][2] <= _T_105 @[Round.scala 71:28]
    node _T_106 = xor(io.round_in[3][3], d[3]) @[Round.scala 71:48]
    node _T_107 = asSInt(_T_106) @[Round.scala 71:48]
    io.round_out[3][3] <= _T_107 @[Round.scala 71:28]
    node _T_108 = xor(io.round_in[3][4], d[3]) @[Round.scala 71:48]
    node _T_109 = asSInt(_T_108) @[Round.scala 71:48]
    io.round_out[3][4] <= _T_109 @[Round.scala 71:28]
    node _T_110 = xor(io.round_in[4][0], d[4]) @[Round.scala 71:48]
    node _T_111 = asSInt(_T_110) @[Round.scala 71:48]
    io.round_out[4][0] <= _T_111 @[Round.scala 71:28]
    node _T_112 = xor(io.round_in[4][1], d[4]) @[Round.scala 71:48]
    node _T_113 = asSInt(_T_112) @[Round.scala 71:48]
    io.round_out[4][1] <= _T_113 @[Round.scala 71:28]
    node _T_114 = xor(io.round_in[4][2], d[4]) @[Round.scala 71:48]
    node _T_115 = asSInt(_T_114) @[Round.scala 71:48]
    io.round_out[4][2] <= _T_115 @[Round.scala 71:28]
    node _T_116 = xor(io.round_in[4][3], d[4]) @[Round.scala 71:48]
    node _T_117 = asSInt(_T_116) @[Round.scala 71:48]
    io.round_out[4][3] <= _T_117 @[Round.scala 71:28]
    node _T_118 = xor(io.round_in[4][4], d[4]) @[Round.scala 71:48]
    node _T_119 = asSInt(_T_118) @[Round.scala 71:48]
    io.round_out[4][4] <= _T_119 @[Round.scala 71:28]
    io.theta_c[0] <= c[0] @[Round.scala 74:14]
    io.theta_c[1] <= c[1] @[Round.scala 74:14]
    io.theta_c[2] <= c[2] @[Round.scala 74:14]
    io.theta_c[3] <= c[3] @[Round.scala 74:14]
    io.theta_c[4] <= c[4] @[Round.scala 74:14]
    io.theta_d[0] <= d[0] @[Round.scala 75:14]
    io.theta_d[1] <= d[1] @[Round.scala 75:14]
    io.theta_d[2] <= d[2] @[Round.scala 75:14]
    io.theta_d[3] <= d[3] @[Round.scala 75:14]
    io.theta_d[4] <= d[4] @[Round.scala 75:14]
    
